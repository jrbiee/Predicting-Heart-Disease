class DeepNN(nn.Module):
    def __init__(self, input_size=11, hidden_size=50, output_size=1):
        super(DeepNN, self).__init__()
        self.layer1 = nn.Linear(input_size, hidden_size)
        self.dropout1 = nn.Dropout(0.2)
        self.layer2 = nn.Linear(hidden_size, 20)
        self.dropout2 = nn.Dropout(0.2)
        # self.layer3 = nn.Linear(50, 25)
        # self.dropout3 = nn.Dropout(0.2)
        # self.layer4 = nn.Linear(25, 15)
        # self.dropout4 = nn.Dropout(0.2)
        self.layer3 = nn.Linear(20, output_size)
        self.dropout3 = nn.Dropout(0.2)
        self.relu = nn.ReLU()
        
        nn.init.xavier_normal_(self.layer1.weight)
        nn.init.xavier_normal_(self.layer2.weight)
        nn.init.xavier_normal_(self.layer3.weight)
    def get_weights(self):
        layer_weights = {
            self.layer1.weight,
            self.layer2.weight,
            self.layer3.weight
        }
            # self.layer4.weight,
            # self.layer5.weight,
        
    
    def forward(self, x):
        x = self.relu(self.layer1(x))
        x = self.dropout1(x)
        x = self.relu(self.layer2(x))
        x = self.dropout2(x)
        x = self.relu(self.layer3(x))
        x = self.dropout3(x)
        # x = self.relu(self.layer4(x))
        # x = self.dropout4(x)
        # x = self.relu(self.layer5(x))
        # x = self.dropout5(x)
        x= torch.sigmoid(x)
        return x

model = DeepNN()

#Data Loaders
def create_data_loaders(scaled_X_train, scaled_X_test, y_train, y_test, batch_size=60):
    scaled_X_train, scaled_X_test, y_train, y_test = torch_conversion(scaled_X_train, scaled_X_test, y_train, y_test)
    
    train_data = TensorDataset(scaled_X_train, y_train)
    test_data = TensorDataset(scaled_X_test, y_test)

    train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size)
    test_loader = DataLoader(test_data, batch_size=batch_size)

    # Call the function to convert data types
    return train_loader, test_loader

train_loader, test_loader = create_data_loaders(scaled_X_train, scaled_X_test, y_train, y_test)

def train_model(train_loader, test_loader, model, lr=0.001, num_epochs=300):
    train_accuracy = []
    test_accuracy = []
    training_losses = []
    testing_losses = []
    training_precisions = []
    testing_precisions = []
    training_recalls = []
    testing_recalls = []

    loss_function = nn.BCELoss()
    optimizer = torch.optim.Adam(params=model.parameters(), lr=lr)
    #Hold the Best Model
    # best_acc = -np.inf
    # best_weights = None
    for epoch in range(num_epochs):
        nn_y_true_train = []
        nn_y_predict_train = []
        training_loss = 0.0

        # Training phase
        model.train()
        for X_train, y_train in train_loader:
            optimizer.zero_grad()
            preds = model(X_train.float())
            loss = loss_function(preds, y_train.view(-1, 1).float())
            loss.backward()
            optimizer.step()
            training_loss += loss.item()
            
            nn_predict = torch.round(preds).detach().cpu().numpy()
            target = y_train.detach().cpu().numpy()
            nn_y_predict_train.extend(nn_predict.reshape(-1).tolist())
            nn_y_true_train.extend(target.tolist())

        train_acc = accuracy_score(nn_y_true_train, nn_y_predict_train)
        train_loss = training_loss / len(train_loader)
        train_precision = precision_score(nn_y_true_train, nn_y_predict_train)
        train_recall = recall_score(nn_y_true_train, nn_y_predict_train)
        
        train_accuracy.append(train_acc)
        training_losses.append(train_loss)
        training_precisions.append(train_precision)
        training_recalls.append(train_recall)

        print(f'Epoch {epoch + 1}/{num_epochs}, Train Accuracy: {train_acc:.4f}', end=', ')
        print(f'Train Loss: {train_loss:.4f}', end=', ')

        # Testing phase
        model.eval()
        nn_y_true_test = []
        nn_y_predict_test = []
        testing_loss = 0.0

        with torch.no_grad():
            for X_test, y_test in test_loader:
                preds = model(X_test.float())
                nn_predict = torch.round(preds).detach().cpu().numpy()
                target = y_test.detach().cpu().numpy()
                nn_y_predict_test.extend(nn_predict.reshape(-1).tolist())
                nn_y_true_test.extend(target.tolist())
                testing_loss += loss_function(preds, y_test.view(-1, 1).float()).item()

        test_acc = accuracy_score(nn_y_true_test, nn_y_predict_test)
        test_loss = testing_loss / len(test_loader)
        test_precision = precision_score(nn_y_true_test, nn_y_predict_test)
        test_recall = recall_score(nn_y_true_test, nn_y_predict_test)
        
        test_accuracy.append(test_acc)
        testing_losses.append(test_loss)
        testing_precisions.append(test_precision)
        testing_recalls.append(test_recall)

        print(f'Test Accuracy: {test_acc:.4f}', end=', ')
        print(f'Test Loss: {test_loss:.4f}', end=', ')
        print(f'Test Precision: {test_precision:.4f}', end=', ')
        print(f'Test Recall: {test_recall:.4f}')
    test_precision = precision_score(nn_y_true_test, nn_y_predict_test, zero_division='warn')
    test_recall = recall_score(nn_y_true_test, nn_y_predict_test, zero_division='warn')
 
    nn_confusion_matrix = metrics.confusion_matrix(nn_y_true_test, nn_y_predict_test)
    cm_nn = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])
    cm_nn.plot()
    plt.show()
    
    print(classification_report(nn_y_true_train, nn_y_predict_train))
    print(classification_report(nn_y_true_test, nn_y_predict_test))
    return train_accuracy, test_accuracy, training_losses, testing_losses, training_precisions, testing_precisions, training_recalls, testing_recalls, nn_confusion_matrix
train_accuracy, test_accuracy, training_losses, testing_losses, training_precisions, testing_precisions, training_recalls, testing_recalls, nn_confusion_matrix = train_model(train_loader, test_loader, model)#, num_epochs=num_epochs)
